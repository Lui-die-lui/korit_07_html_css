/* 자손 결합자 */
.outer li {
  color: olivedrab;
}

/* .outer 공백 list 로 되어있다는 점을 봤을 때, outer 클래스의 자손 요소인 li 태그들에게 color : olivedrab 을 적용하라는 의미가 됨. 그렇기 때문에 ol 요소의 자손 요소인 li들은 여전히 검은ㄴ색 상태가 됨

Java 때와 달리 자식 클래스 / 서브 클래스라는 표현을 쓰지 않은 이유는

상당히 많은 하위 항목들이 전부 css의 영향을 받기 때문
과일 리스트도 컬러가 적용된 점을 확인하면 알 수 있음
*/

.outer > li {
  color: dodgerblue;
}

/* 자손이 아니라 자식만 변경하고싶다면 > 가 포함됨 */

.outer > li li {
  text-decoration: underline;
}

/* 자식의 자손인 li 태그에 underline 적용되는 형태라고 볼 수 있음. */

/* .outer > li > ul {
  text-decoration: underline;
} */

/* .outer의 자식인 li의 자식은 ul이라는 점을 감안하면 적용이 불가능함 */

/* 참고 : 
.outer li {color:olivedrab;} 을 없애면 파란색이 자손까지 적용됨
이상의 경우 서체나 텍스트 관련 일부 CSs는 하위클래스에게 자동 상속 되기 때문임. 즉 , 다른 선택자 속성을 적용하지 않으면 자손 클래스까지 물려받음  자손 - 공백 자식 - 부등호*/

/* 뒤따르는 모든 동생 결합자 */
.starter {
  font-style: italic;
}

/* .starter  li {
  font-weight: bold;
} */

/* 가상 클래스 */
/* 이상 까지는 특정 id나 특정 클래스 선택해서 스타일을 지정했는대, 가상 ㅡㄹ래스는 이ㅣ와 달리 특정 상황을 가정하고 이름붙임.
작성 방식은 콜론을 사용(:) */

ol li:first-child, ol li:last-child {
  color: yellowgreen;
}

/* ~ 가 아닌 요소 가상 클래스  */
.outer >li:not(:last-child) {
  text-decoration: line-through;
}
/* outer클래스의 직계 자식인 li태그중에 마지막 요소가 아닌 것을 골라 line-through를 적용하라는 의미
그렇다면 직계 자식인 육류, 채소, 유제품, 과일 중에서 마지막 과일을 뺀 나머지 세 개에만 취소선이 적용 */

/* ul:not(.outer) li {
  font-weight: bold;
} */
/* ul태그중 outer클래스가 아닌 것을 골라서 그 자손이 li 요소에 bold를 적용하라는 의미가 됨 ul 태그는 두 개로 중첩되어서 이루어져있기 때문에 들여 쓰기가 적용된 과일리스트 ul은 class outer가 아니므로 bold체가 적용*/

/* ~번째 요소 가상 클래스 */
/* odd / even을 3n을 3대신 ()에 넣어보면 결과값이 바뀌는것울 확인 가능 */
ol li:nth-child(odd) {
  font-weight: bold;
color: deeppink;
}

li:hover {
  font-weight: bold;
  color: blue;
}
/* 조건이 구체적이면 우선순위가 높음 = deeppink 적용해놓은 클래스가 지금 hover보다 클래스 우선순위가 높음 */